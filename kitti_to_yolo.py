#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This script converts a Kitti-formatted dataset, generated by the Isaac Sim script,
into the YOLO format required for training object detection models.

It performs the following steps:
1.  Reads configuration from a .env file to find the input dataset.
2.  Parses Kitti label files from the 'object_detection' directory.
3.  Maps string class names ('car', 'person') to COCO-standard integer IDs.
4.  Reads corresponding image dimensions from the 'rgb' directory.
5.  Calculates and normalizes YOLO bounding box coordinates (center-x, center-y, width, height).
6.  Writes the new YOLO labels to a clean output directory.
7.  Randomly splits the dataset into training and validation sets, creating
    the 'train.txt' and 'valid.txt' files required by YOLO frameworks.
"""

import os
import argparse
from PIL import Image
import random
import sys

# --- Configuration ---

# De facto standard class IDs from the COCO dataset
COCO_CLASS_MAP = {
    "person": 0,
    "car": 2
    # Add other COCO classes here if you expand your dataset, e.g.,
    # "bicycle": 1,
    # "truck": 7,
}

# --- Helper Functions ---

def load_config_from_env(env_path):
    """
    Reads KEY=VALUE pairs from a .env file and returns them as a dictionary.
    """
    config = {}
    if not os.path.exists(env_path):
        return config
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip().strip('"\'')
    return config

def convert_kitti_to_yolo(kitti_box, img_width, img_height):
    """
    Converts a Kitti bounding box (left, top, right, bottom) to the
    YOLO format (center_x, center_y, width, height) normalized by image size.
    """
    kitti_left, kitti_top, kitti_right, kitti_bottom = kitti_box
    
    # Calculate center, width, and height
    center_x = (kitti_left + kitti_right) / 2.0
    center_y = (kitti_top + kitti_bottom) / 2.0
    width = kitti_right - kitti_left
    height = kitti_bottom - kitti_top
    
    # Normalize by image dimensions
    norm_center_x = center_x / img_width
    norm_center_y = center_y / img_height
    norm_width = width / img_width
    norm_height = height / img_height
    
    return norm_center_x, norm_center_y, norm_width, norm_height

def process_dataset(input_dir, output_dir, train_split):
    """
    Main processing function to convert the entire dataset.
    """
    kitti_labels_path = os.path.join(input_dir, "Camera", "object_detection")
    kitti_images_path = os.path.join(input_dir, "Camera", "rgb")
    
    yolo_labels_path = os.path.join(output_dir, "labels")
    os.makedirs(yolo_labels_path, exist_ok=True)

    if not os.path.isdir(kitti_labels_path):
        print(f"Error: Kitti labels directory not found at '{kitti_labels_path}'")
        sys.exit(1)

    print(f"Searching for Kitti labels in: {kitti_labels_path}")
    
    image_paths = []
    kitti_files = [f for f in os.listdir(kitti_labels_path) if f.endswith('.txt')]
    
    print(f"Found {len(kitti_files)} label files. Starting conversion...")

    for filename in kitti_files:
        kitti_filepath = os.path.join(kitti_labels_path, filename)
        image_filename = os.path.splitext(filename)[0] + ".png"
        image_filepath = os.path.join(kitti_images_path, image_filename)
        
        if not os.path.exists(image_filepath):
            print(f"Warning: Corresponding image not found for label '{filename}'. Skipping.")
            continue
            
        yolo_lines = []
        try:
            with Image.open(image_filepath) as img:
                img_width, img_height = img.size

            with open(kitti_filepath, 'r') as f:
                for line in f:
                    parts = line.strip().split()
                    class_name = parts[0].lower()
                    
                    class_id = COCO_CLASS_MAP.get(class_name)
                    if class_id is None:
                        continue # Skip classes we don't care about

                    # Kitti format: type, truncated, occluded, alpha, left, top, right, bottom, ...
                    kitti_box = [float(p) for p in parts[4:8]]
                    yolo_box = convert_kitti_to_yolo(kitti_box, img_width, img_height)
                    
                    yolo_lines.append(f"{class_id} {yolo_box[0]} {yolo_box[1]} {yolo_box[2]} {yolo_box[3]}")

            if yolo_lines:
                yolo_filepath = os.path.join(yolo_labels_path, filename)
                with open(yolo_filepath, 'w') as f_out:
                    f_out.write("\n".join(yolo_lines))
                # Only add images that have valid labels to our list for splitting
                image_paths.append(os.path.abspath(image_filepath))

        except Exception as e:
            print(f"Error processing file {filename}: {e}")

    print("Conversion of label files complete.")

    # --- Create train/validation split ---
    print("Creating train/validation split...")
    random.shuffle(image_paths)
    split_index = int(len(image_paths) * train_split)
    
    train_paths = image_paths[:split_index]
    valid_paths = image_paths[split_index:]

    with open(os.path.join(output_dir, "train.txt"), 'w') as f:
        f.write("\n".join(train_paths))
        
    with open(os.path.join(output_dir, "valid.txt"), 'w') as f:
        f.write("\n".join(valid_paths))

    print(f"Split complete: {len(train_paths)} training images, {len(valid_paths)} validation images.")
    print(f"YOLO dataset successfully created at: {output_dir}")


if __name__ == "__main__":
    # --- Determine Input Directory from .env or use default ---
    script_dir = os.path.dirname(os.path.abspath(__file__))
    env_config = load_config_from_env(os.path.join(script_dir, ".env"))
    
    project_root = env_config.get("PROJECT_ROOT_PATH", script_dir)
    default_input_dir = os.path.join(project_root, "output") # Default from generate_data.sh

    # --- Setup Argument Parser ---
    parser = argparse.ArgumentParser(
        description="Convert Isaac Sim Kitti dataset to YOLO format.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "--input_dir",
        type=str,
        default=default_input_dir,
        help="Path to the root of the generated Kitti dataset (e.g., 'output').\n"
             "Defaults to the 'output' directory inside the PROJECT_ROOT_PATH from your .env file."
    )
    parser.add_argument(
        "--output_dir",
        type=str,
        default=os.path.join(project_root, "yolo_dataset"),
        help="Path to save the converted YOLO dataset."
    )
    parser.add_argument(
        "--train_split",
        type=float,
        default=0.8,
        help="The proportion of the dataset to use for training (e.g., 0.8 for 80%)."
    )
    
    args = parser.parse_args()

    # --- Run Conversion ---
    process_dataset(args.input_dir, args.output_dir, args.train_split)

