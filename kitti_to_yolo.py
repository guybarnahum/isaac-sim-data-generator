#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This script converts a Kitti-formatted dataset, generated by the Isaac Sim script,
into a complete, portable, and ready-to-train YOLOv5/v8 dataset.

It performs the following steps:
1.  Reads configuration from a .env file to find the input dataset.
2.  Creates a self-contained 'yolo_dataset' directory inside the Kitti output folder.
3.  Parses Kitti labels and maps class names to COCO-standard integer IDs.
4.  Converts Kitti bounding boxes to the normalized YOLO format.
5.  Copies images and labels into standard YOLO train/valid directories.
6.  Randomly splits the dataset.
7.  Generates a portable 'data.yaml' file, making the dataset ready for immediate training.
"""

import os
import argparse
from PIL import Image
import random
import sys
import shutil
import yaml

# --- Configuration ---
COCO_CLASS_MAP = {
    "person": 0,
    "car": 2
}

# --- Helper Functions ---
def load_config_from_env(env_path):
    """Reads KEY=VALUE pairs from a .env file and returns them as a dictionary."""
    config = {}
    if not os.path.exists(env_path):
        return config
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip().strip('"\'')
    return config

def convert_kitti_to_yolo(kitti_box, img_width, img_height):
    """Converts a Kitti bounding box to the normalized YOLO format."""
    kitti_left, kitti_top, kitti_right, kitti_bottom = kitti_box
    
    center_x = (kitti_left + kitti_right) / 2.0
    center_y = (kitti_top + kitti_bottom) / 2.0
    width = kitti_right - kitti_left
    height = kitti_bottom - kitti_top
    
    norm_center_x = center_x / img_width
    norm_center_y = center_y / img_height
    norm_width = width / img_width
    norm_height = height / img_height
    
    return norm_center_x, norm_center_y, norm_width, norm_height

def process_dataset(input_dir, train_split):
    """
    Main processing function to convert the entire dataset.
    """
    # --- Define Paths ---
    kitti_labels_path = os.path.join(input_dir, "Camera", "object_detection")
    kitti_images_path = os.path.join(input_dir, "Camera", "rgb")
    yolo_output_dir = os.path.join(input_dir, "yolo_dataset")
    
    yolo_img_train_path = os.path.join(yolo_output_dir, "images", "train")
    yolo_img_valid_path = os.path.join(yolo_output_dir, "images", "valid")
    yolo_lbl_train_path = os.path.join(yolo_output_dir, "labels", "train")
    yolo_lbl_valid_path = os.path.join(yolo_output_dir, "labels", "valid")

    for path in [yolo_img_train_path, yolo_img_valid_path, yolo_lbl_train_path, yolo_lbl_valid_path]:
        os.makedirs(path, exist_ok=True)
        
    if not os.path.isdir(kitti_labels_path):
        print(f"Error: Kitti labels directory not found at '{kitti_labels_path}'")
        sys.exit(1)

    print(f"Searching for Kitti labels in: {kitti_labels_path}")
    
    valid_samples = []
    kitti_files = [f for f in os.listdir(kitti_labels_path) if f.endswith('.txt')]
    for filename in kitti_files:
        image_filename = os.path.splitext(filename)[0] + ".png"
        if os.path.exists(os.path.join(kitti_images_path, image_filename)):
            valid_samples.append(os.path.splitext(filename)[0])
    
    print(f"Found {len(valid_samples)} valid samples with corresponding images and labels.")
    
    random.shuffle(valid_samples)
    split_index = int(len(valid_samples) * train_split)
    train_samples = valid_samples[:split_index]
    valid_samples = valid_samples[split_index:]

    print(f"Processing {len(train_samples)} training samples and {len(valid_samples)} validation samples...")
    total_samples = len(valid_samples)
    
    for split_name, sample_list in [("train", train_samples), ("valid", valid_samples)]:
        print(f"\nProcessing '{split_name}' split...")
        num_in_split = len(sample_list)

        for j, sample_stem in enumerate(sample_list):
            print(f"\r  -> Converting sample {j + 1}/{num_in_split}", end="")
            
            kitti_lbl_file = os.path.join(kitti_labels_path, sample_stem + ".txt")
            source_img_file = os.path.join(kitti_images_path, sample_stem + ".png")
            
            try:
                shutil.copy(source_img_file, os.path.join(yolo_output_dir, "images", split_name))
                with Image.open(source_img_file) as img:
                    img_width, img_height = img.size
                
                yolo_lines = []
                with open(kitti_lbl_file, 'r') as f:
                    for line in f:
                        parts = line.strip().split()
                        class_name = parts[0].lower()
                        class_id = COCO_CLASS_MAP.get(class_name)
                        if class_id is None:
                            continue
                        
                        kitti_box = [float(p) for p in parts[4:8]]
                        yolo_box = convert_kitti_to_yolo(kitti_box, img_width, img_height)
                        yolo_lines.append(f"{class_id} {yolo_box[0]} {yolo_box[1]} {yolo_box[2]} {yolo_box[3]}")
                
                if yolo_lines:
                    yolo_lbl_file = os.path.join(yolo_output_dir, "labels", split_name, sample_stem + ".txt")
                    with open(yolo_lbl_file, 'w') as f_out:
                        f_out.write("\n".join(yolo_lines))
            except Exception as e:
                print(f"Error processing sample {sample_stem}: {e}")
                
    print("\nFile conversion and copying complete.")
    
    # --- Generate data.yaml file ---
    print("Generating data.yaml file...")
    yaml_data = {
        'train': 'images/train',
        'val': 'images/valid',
        'nc': len(COCO_CLASS_MAP),
        'names': {id: name for name, id in COCO_CLASS_MAP.items()}
    }

    yaml_filepath = os.path.join(yolo_output_dir, "data.yaml")
    with open(yaml_filepath, 'w') as f:
        yaml.dump(yaml_data, f, sort_keys=False, default_flow_style=False)
        
    print(f"YOLO dataset successfully created at: {yolo_output_dir}")
    print(f"Ready for training with: yolo train data={os.path.abspath(yaml_filepath)}")


if __name__ == "__main__":
    script_dir = os.path.dirname(os.path.abspath(__file__))
    env_config = load_config_from_env(os.path.join(script_dir, ".env"))
    
    project_root = env_config.get("PROJECT_ROOT_PATH", script_dir)
    default_input_dir = env_config.get("OUTPUT_DIR") or os.path.join(project_root, "output")

    parser = argparse.ArgumentParser(description="Convert Isaac Sim Kitti dataset to a standalone YOLOv5/v8 dataset.")
    parser.add_argument(
        "--input_dir",
        type=str,
        default=default_input_dir,
        help="Path to the root of the generated Kitti dataset (e.g., 'output')."
    )
    parser.add_argument(
        "--train_split",
        type=float,
        default=0.8,
        help="The proportion of the dataset to use for training (e.g., 0.8 for 80%)."
    )
    
    args = parser.parse_args()
    
    process_dataset(args.input_dir, args.train_split)
